The main goal of the data::registry API is to share data between components
or share "environment" variables that are accessible only via special
functionality.

Requirements

  1. `Lightweight`-ness

  2. Scalability

     API should support massive amount of entries.
     That should be possible already. Corresponding `load`-tests will be
     implemented.

  3. Context data support

     Both reg::get() and reg::set() should accept context data if required by
     corresponding reader/writers are accepting it.

  4. No generators

  5. Complex type support

     API should support all data types, including non-trivial, functional
     objects (callables), non-copyable objects.

  6. It should be possible to specify in which TU the data is "stored"

     Statics are "stored" using `_store_e()` in a translation unit of user's
     choice. Lifetime of a non-static entries is defined by user, that provides
     read / write accessor functions - is this case API knows nothing about
     where the data stored.

  7. Type awarness and type certainty

     6.1. Non-fundamental statics must be read by const reference
     6.2. Fundamental statics must be read by value

Rationale

  1. It's possible to share only bits of data between components, but not
     ENTIRE components.

  2. It's a possible replacement for RTE but for opensource, but with no
     generators involved.
